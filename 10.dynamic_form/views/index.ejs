<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적폼(ajax,axios,fetch)</title>
    <!-- jQuery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>

    <!-- axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
      .result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적폼 전송 연습하기!</h1>
    <form name="register">
      <label for="name">이름:</label>
      <input type="text" name="name" id="name" required />

      <br /><br />
      <span>성별</span>
      <input type="radio" id="male" name="gender" value="남성" required />
      <!-- radio 같은 경우에는 같은 name일 때, required를 한 곳에만 작성해도 ok -->
      <label for="male">남자</label>
      <input type="radio" id="female" name="gender" value="여성" />
      <label for="female">여자</label>

      <br /><br />
      <!-- Ajax를 사용하기 때문에 button 타입이 submit일 필요x -->
      <button type="button" onclick="ajaxGet()">Ajax GET 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax POST 제출</button>
      <br />
      <button type="button" onclick="axiosGet()">Axios GET 제출</button>
      <button type="button" onclick="axiosPost()">Axios POST 제출</button>
      <br />
      <button type="button" onclick="fetchGet()">fetch GET 제출</button>
      <button type="button" onclick="fetchPost()">fetch POST 제출</button>
    </form>
    <div class="result"></div>
    <script>
      const resultBox = document.querySelector(".result");
      function ajaxGet() {
        const form = document.forms["register"]; // 폼 선택(form 이름이 register)
        // console.log(form);
        // console.log(form.name); // input-text 선택
        // console.log(form.gender); // input - radio 선택
        // console.log(form.gender.length); // 2 ; radio 선택 개수
        // console.log(form.gender.value); // "","남성","여성" ; radio의 value

        /* 유효성 검증 따로 해주기 */
        // button type button은 required 동작 X
        if (form.name.value.trim() === "") {
          alert("이름을 입력해주세요!");
          return;
        }

        if (form.gender.value === "") {
          alert("성별을 선택해주세요!");
          return;
        }

        //------ajax 요청------
        // 보낼 데이터 객체 형태로 만들기
        const data = {
          name: form.name.value, // "이름..."
          gender: form.gender.value, // "여성", "남성"
        };

        /* ajax 사용 */
        $.ajax({
          type: "get", // get, post, delete ...
          url: "/ajax", // form의 action에 해당
          data: data, // 서버로 넘겨줄 데이터(get-query)

          // 통신이 성공했을 때
          // ⭐️ = send로 req.query를 보냈기 때문에 res라는 매개변수에 req.query가 담김

          success: function (res) {
            // 통신 이후에 일어날 일들
            console.log(res);
            resultBox.textContent = `GET / ajax 요청 완료! ${res.name}의 성별은 ${res.gender}`;
          },

          // 통신이 실패했을 때
          error: function (err) {
            console.log("err:", err);
          },
        });
      }
      function ajaxPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };
        $.ajax({
          type: "post",
          url: "/ajax",
          data: data,
          success: function (data) {
            console.log(data);
            resultBox.textContent = `POST / ajax 요청 완료! ${data.name}의 성별은 ${data.gender}`;
          },
          err: function (err) {
            console.log("err:", err);
          },
        });
      }

      async function axiosGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };
        // 유효성 검사 - checkValidity()
        // required가 있으면 기입이 되었는지 검사해줌
        /*
        - required 속성이 없는 항목 -> 항상 true를 반환
        - required 속성이 있는 항목
            -> 기입 ; true
            -> 기업x ; false
        */

        console.log(form.name.checkValidity()); // input[name = 'name']
        console.log(form.gender[0].checkValidity()); // input[name = 'gender']

        if (!form.name.checkValidity()) {
          resultBox.innerText = "이름을 입력해주세요";
          // resultBox.innerText = form.name.validationMessage; // 이 입력란을 작성해주세요.
          return;
        }
        if (!form.gender[0].checkValidity()) {
          resultBox.innerText = "성별을 입력해주세요";
          //   resultBox.innerText = form.gender[0].validationMessage; // 다음 중 하나를 선택하세요.
          return;
        }
        console.log("여기까지 오나요..");

        // ------ axios 요청 보내기 -------
        // 1. then ~ catch 사용
        // axios({
        //   method: "get",
        //   url: "/axios",
        //   params: data, // get 요청 일 때는 params에 담아서 요청
        // })
        //   .then((response) => {
        //     // 통신에 성공했을 때
        //     // ⭐️ = send로 req.query를 보냈기 때문에 response라는 매개변수에 req.query가 담김
        //     console.log(response); // 아래에 데이터들을 다~~ 포함
        //     console.log("--------");
        //     console.log(response.data); // 이게 우리가 필요로 하는 객체! {name:'allie', gender:'여성'}
        //     console.log(response.stauts);
        //     console.log(response.statusText);
        //     console.log(response.headers);
        //     console.log(response.config);
        //     resultBox.textContent = `GET/axios 요청 완료!
        //     ${response.data.name}의 성별은 ${response.data.gender}`;
        //     resultBox.style.color = "green";
        //   })
        //   .catch((err) => {
        //     console.log("error!!!!!");
        //     console.log(err);
        //   });

        // 2. async await 사용
        // 에러 처리를 try~catch 문을 사용해서 해주는 게 좋다!
        try {
          const response = await axios({
            method: "get",
            url: `/axios?name=${data.name}&gender=${data.gender}`,
          });
          console.log(response);
          console.log(response.data);
          // 구조 분해 할당
          const { name, gender } = response.data;
          resultBox.textContent = `${name}의 성별은 ${gender}`;
          resultBox.style.color = "green";
        } catch (err) {
          console.error(err);
        }
      }

      async function axiosPost() {
        const form = document.forms["register"];
        const data1 = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await axios({
            method: "post",
            url: "/axios",
            data: data1, // body 담을 때는 data에 담아야 함
          });
          console.log(res);
          console.log("실제 데이터:", res.data);
          // 구조 분해 할당 key 이름 변경 복습
          const { name: 이름, gender: 성별 } = res.data;
          resultBox.textContent = `POST / axios 요청 완료 ${이름}의 성별은 ${성별}`;
          resultBox.style.color = "hotpink";
        } catch (err) {
          console.error(err);
        }
      }
      function fetchGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };
        // ftetch의 default method는 get이라 생략 가능
        // fetch('/fetch',{
        //   method : 'get',
        // })
        // 🖐
        fetch(`/fetch?name=${data.name}&gender=${data.gender}`)
          .then((res) => {
            console.log(res);
            // 서버에서 넘어온 문자열('응답 완료')을 뽑아내기 위해 text() 메소드 사용
            // 서버에서 넘어온 object를 본문으로 뽑아내기 위해 json() 메소드 사용
            // return res.text();
            return res.json();
          })
          .then((res) => {
            console.log(res);
            resultBox.textContent = `GET/fetch 요청 완료 ${res.name}의 성별은 ${res.gender}`;
            resultBox.style.color = "lime";
          })
          .catch((err) => {
            console.error(err);
          });
      }
      async function fetchPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await fetch("/fetch", {
            method: "post",
            body: JSON.stringify(data), // JSON 형식으로 보내야 함
            headers: {
              "Content-Type": "application/json",
            },
          });
          console.log(res);
          // json(), text() >> 시간이 걸리는 작업이라 이 작업도 기다릴 수 있도록 await 필요
          const result = await res.json();
          console.log(result);
          const { name, gender } = result;
          resultBox.textContent = `POST/ fetch 요청 결과 :${name}의 성별은 ${gender}`;
          resultBox.style.color = "gray";
        } catch (err) {
          console.error(err);
        }
      }
    </script>
  </body>
</html>
